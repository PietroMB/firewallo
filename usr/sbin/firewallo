#!/bin/bash
#set -x
ORARIO=`date`
DIRCONF="/etc/firewallo"
source $DIRCONF/firewallo.conf
#DIALOG=`which dialog`
DIALOG="nano"

if [ "$DIALOG" = "" ] ; then
	DIALOG="vi"
	OPTS=""
elif [ "$DIALOG" = "nano" ] ; then
	DIALOG="nano"
	OPTS=""
elif [ "$DIALOG" = "dialog" ] ; then
	DIALOG="nano"
	OPTS=""

elif [ "$DIALOG" != "" ] ; then
	DIALOG="$DIALOG"
	OPTS="0 0"
fi

networking () {
    if [ "$DIALOG" = "dialog" ] ; then
		$DIALOG --backtitle CONFIGURATION_INTERFACES --title interfaces --editbox  /etc/network/interfaces  $OPTS  2> .tmp
	    RETVAL=$?
        if [ "$RETVAL" = "0" ]; then
			cat .tmp >  /etc/network/interfaces ; rm .tmp        
		fi
	else
		$DIALOG /etc/network/interfaces
	fi
}

sysctl  () {
	if [ "$DIALOG" = "dialog" ] ; then
 		$DIALOG --backtitle CONFIGURATION_INTERFACES --title interfaces --editbox  /etc/sysctl.conf   $OPTS  2> .tmp
    	RETVAL=$?
        if [ "$RETVAL" = "0" ]; then
        	cat .tmp >  /etc/sysctl.conf ; rm .tmp
        fi     
    else
    	$DIALOG /etc/sysctl.conf
    fi
}


conf () {
	if [ "$DIALOG" = "dialog" ] ; then
		$DIALOG --backtitle CONFIGURATION_EDIT --title firewallo.conf --editbox $DIRCONF/firewallo.conf  $OPTS  2> .tmp 
		RETVAL=$?
       	if [ "$RETVAL" = "0" ]; then
			cat .tmp > $DIRCONF/firewallo.conf ; rm .tmp
		fi  
    else
  		$DIALOG $DIRCONF/firewallo.conf
	fi
}

filter () {
MENU="
fw2fw	fw2lan		fw2wan		fw2vpns		fw2dmz		\
lan2fw	lan2lan		lan2wan		lan2vpns 	lan2dmz  	\
wan2fw	wan2lan		wan2wan		wan2vpns 	wan2dmz   	\
vpns2fw	vpns2lan	vpns2wan	vpns2vpns 	vpns2dmz 	\
dmz2fw	dmz2lan		dmz2wan		dmz2vpns 	dmz2dmz 	\
exit"

select opt in $MENU ; do
	if [ "$opt" = "exit" ] ; then
		main 
	else
		if [ "$DIALOG" = "dialog" ] ; then
			$DIALOG --backtitle FILTER_EDIT --title $opt --editbox $DIRCONF/filter/$opt 		$OPTS 2> .tmp 
			RETVAL=$?
           	if [ "$RETVAL" = "0" ]; then
				cat .tmp > $DIRCONF/filter/$opt ; rm .tmp
			fi			
		else
			$DIALOG $DIRCONF/filter/$opt 
		fi
	fi
done
}

nat  () {
	if [ "$DIALOG" = "dialog" ] ; then
        $DIALOG --backtitle NAT_EDIT --title firewallo.nat --editbox $DIRCONF/nat/firewallo.nat  	  $OPTS 2> .tmp
		RETVAL=$?
    	if [ "$RETVAL" = "0" ]; then
			cat .tmp > $DIRCONF/nat/firewallo.nat ; rm .tmp
		fi

	else
		$DIALOG $DIRCONF/nat/firewallo.nat
	fi
}

mangle  () {
	 if [ "$DIALOG" = "dialog" ] ; then
		$DIALOG --backtitle MANGLE_EDIT --title firewallo.mangle --editbox $DIRCONF/mangle/firewallo.mangle $OPTS 2> .tmp
	    RETVAL=$?
        if [ "$RETVAL" = "0" ]; then
			cat .tmp > $DIRCONF/mangle/firewallo.mangle ; rm .tmp
		fi		
    else
		$DIALOG	$DIRCONF/mangle/firewallo.mangle
	fi
}

route  () {
	if [ "$DIALOG" = "dialog" ] ; then
        $DIALOG --backtitle ROUTE_EDIT --title firewallo.route --editbox $DIRCONF/route/firewallo.route $OPTS 2> .tmp
		RETVAL=$?
        if [ "$RETVAL" = "0" ]; then
		cat .tmp > $DIRCONF/route/firewallo.route ; rm .tmp
		fi

	else
 		$DIALOG $DIRCONF/route/firewallo.route
	fi
}

start () {
if  [ "$NFT" != "" ] ; then
/etc/init.d/firewallo.nft start

elif [ "$IPT" != "" ]  ; then

/etc/init.d/firewallo.iptables start
fi
}

stop () {
if  [ "$NFT" != "" ] ; then
/etc/init.d/firewallo.nft stop
elif [ "$IPT" != "" ] ; then
/etc/init.d/firewallo.iptables stop
fi

}

restart () {
stop
start
}

status () {
less $DIRCONF/status.log
}

rules () {
if [ "$IPT" != "" ]  ;then
	$IPT -t filter 	-L -vn > .filter
	$IPT -t nat 	-L -vn > .nat
	$IPT -t mangle 	-L -vn > .mangle
elif [ "$NFT" != "" ] ; then
	$NFT list ruleset > .ruleset
fi

if [ -e .filter ] ; then
	echo "##############IPTABLES RULES##################"
	cat .filter .nat .mangle | less
fi
if [ -e .ruleset ]  ; then
	echo "#################NFT RULESET##################"
	cat .ruleset | less
fi

rm .filter .nat .mangle .ruleset 2>/dev/null
main

#done
}
saveconf () {
if [ "$IPT" != "" ] ; then
	echo "Save Conf di IPTABLES to /etc/iptables/rules.v4 and enable nftables at startup."
	echo '
[Unit]
Description=Restore iptables rules
After=network.target

[Service]
Type=oneshot
ExecStart=/bin/bash -c "/sbin/iptables-nft-restore < /etc/iptables/rules.v4"
ExecStartPost=/bin/bash -c "/sbin/ip6tables-nft-restore < /etc/iptables/rules.v6"
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
'> /etc/systemd/system/iptables-restore.service
	systemctl daemon-reload
	systemctl disable nftables.service
	systemctl enable  iptables-restore.service
	if  [ ! -e /etc/iptables ]  ; then mkdir /etc/iptables/ ; fi
	iptables-nft-save > /etc/iptables/rules.v4
	chmod 644 /etc/iptables/rules.v4
	echo "..OK"
elif [ "$NFT" != ""  ] ; then
	echo "Save Conf to /etc/nftables.conf and enable nftables at startup."
	systemctl disable iptables-restore.service
	systemctl enable nftables.service
	nft list ruleset > /etc/nftables.conf
	echo "..OK"
fi
}
nftiptables () {
echo "SELECT IPTABLES OR NFTABLES"
MENU1="iptables nftables"
opt1=""
select opt1 in $MENU1 ; do
        if [ "$opt1" = "nftables" ] ; then
                export IPT="";
		export NFT="/usr/sbin/nft"
		sed -i 's/IPT=\"\/sbin\/iptables\"//g'  $DIRCONF/firewallo.conf
		sed -i 's/NFT=\"\/usr\/sbin\/nft\"//g'  $DIRCONF/firewallo.conf
		printf 'NFT=\"/usr/sbin/nft\"' >> $DIRCONF/firewallo.conf
		return
        elif [ "$opt1" = "iptables" ] ; then
                export NFT="";
		export IPT="/sbin/iptables"
		sed -i 's/IPT=\"\/sbin\/iptables\"//g'  $DIRCONF/firewallo.conf
		sed -i 's/NFT=\"\/usr\/sbin\/nft\"//g'  $DIRCONF/firewallo.conf
                printf 'IPT=\"/sbin/iptables\"' >> $DIRCONF/firewallo.conf
		return
        fi
done
}



# Funzione per monitorare i log con Ctrl+C che uccide solo journalctl
log_filter () { 
    echo "SELECT chains do you want to view"

    # Definizione del menu come array
    MENU=("EXIT" "state" "icmp_good" "bad_tcp_flags" "POSTROUTING" "PREROUTING" "DROP" "OUTPUT_DROP" "INPUT_DROP" "FORWARD_DROP"  \
          "fw2fw" "fw2lan" "fw2wan" "fw2vpns" "fw2dmz" \
          "lan2fw" "lan2lan" "lan2wan" "lan2vpns" "lan2dmz" \
          "wan2fw" "wan2lan" "wan2wan" "wan2vpns" "wan2dmz" \
          "vpns2fw" "vpns2lan" "vpns2wan" "vpns2vpns" "vpns2dmz" \
          "dmz2fw" "dmz2lan" "dmz2wan" "dmz2vpns" "dmz2dmz" "nothing")

    # Usa l'array con select
    select opt in "${MENU[@]}"; do
        if [ "$opt" = "EXIT" ]; then
            echo "Uscita dal log filter."
            break  # Esci dal ciclo

        elif [ "$opt" = "nothing" ] && [ "$1" = "live" ]; then	
            # Mostra tutti i log in modalitÃ  live
            journalctl -k -f | less

        elif [ "$1" = "live" ] && [ "$opt" != "nothing" ]; then
            # Filtra i log live con grep
			echo "Logging $1 $opt --- Press Ctrl+C to exit"
            journalctl -k -f | grep $opt &  # Esegui in background
            PID=$!  # Salva il PID
            trap "echo 'Exit From Log ...'; kill $PID" SIGINT  # Cattura Ctrl+C
            wait $PID  # Aspetta che il processo termini
			main
        elif [ "$1" != "live" ] && [ "$opt" != "nothing" ]; then
            # Mostra i log dall'inizio di una determinata data
            journalctl -k --since "$1" | grep $opt | less

        elif [ "$1" != "live" ] && [ "$opt" = "nothing" ]; then
            # Mostra tutti i log dall'inizio di una determinata data
            journalctl -k --since "$1" | less
        fi
    done
}

# Funzione per selezionare il tipo di log
logs () {
    echo "SELECT log type"
    MENU1=("EXIT" "live" "1 week ago" "1 day ago" "1 hour ago" "1 minute ago" )
    
    select opt1 in "${MENU1[@]}"; do
		if [ "$opt1" = "EXIT" ] ; then
			main
		else
        log_filter "$opt1"
		fi
    done
}

show_wizard () {
function show_menu {
    clear
    echo "======================================"
    echo "          FIREWALL WIZARD MENU        "
    echo "======================================"
    echo "1) Filter Wizard"
    echo "2) Nat Prerouting Wizard"
    echo "3) Nat Postrouting Wizard"
    echo "4) Exit"
    echo "======================================"
    echo -n "Select an option: "
}

# Funzioni per le diverse opzioni
function filter_wizard {
    /etc/firewallo/bin/magic_filter.sh
}

function nat_prerouting_wizard {
	/etc/firewallo/bin/magic_nat_prerouting.sh
}

function nat_postrouting_wizard {
    /etc/firewallo/bin/magic_nat_postrouting.sh
}

# Ciclo principale del menu
while true
do
    show_menu
    read option

    case $option in
        1)
            filter_wizard
            ;;
        2)
            nat_prerouting_wizard
            ;;
        3)
            nat_postrouting_wizard
            ;;
        4)
            echo "Exit"
            break
            ;;
        *)
            echo "Select right Option!."
            ;;
    esac

    # Pausa per permettere la lettura del messaggio
    echo -n "Press Enter to continue..."
    read
done
}


main () {
clear
cat $DIRCONF/motd
echo "
DEFAULT EDITOR: $DIALOG 
###########################################
"
if [[ "$NFT" = "" && "$IPT" = "" ]] ;then
	echo " DEVI SETTARE IL Backend Scegli iptables o nftables"
fi

MENU="networking sysctl conf filter nat mangle start stop restart route wizard status rulesview saveconf nft-iptables logs exit"
select opt in $MENU ; do
	if [ "$opt" = "networking" ] ; then
		networking ;  main
	elif [ "$opt" = "conf" ] ; then
		conf ; main
	elif [ "$opt" = "sysctl" ] ; then
        sysctl ; main
	elif [ "$opt" = "filter" ] ; then
        filter ;
    elif [ "$opt" = "nat" ] ; then
        nat ; main
	elif [ "$opt" = "mangle" ] ; then
        mangle ; main
	elif [ "$opt" = "start" ] ; then
        start ; echo "PRESS ENTER" ;read INVIO >> /dev/null 2>&1 ;main
	elif [ "$opt" = "stop" ] ; then
        stop ; echo "PRESS ENTER" ;read INVIO >> /dev/null 2>&1 ;main
	elif [ "$opt" = "restart" ] ; then
        restart ; echo "PRESS ENTER" ;read INVIO >> /dev/null 2>&1 ;main
	elif [ "$opt" = "route" ] ; then
        route ; main
	elif [ "$opt" = "status" ] ; then
        status ; main
	elif [ "$opt" = "rulesview" ] ; then
        rules ; main
    elif [ "$opt" = "saveconf" ] ; then
        saveconf ; main
    elif [ "$opt" = "nft-iptables" ] ; then
        nftiptables ; main
	elif [ "$opt" = "logs" ] ; then
        logs ;
	elif [ "$opt" = "wizard" ] ; then
		show_wizard ;
	elif [ "$opt" = "exit" ] ; then
        echo ByeZzZ.
		exit
	fi
done
}
main
